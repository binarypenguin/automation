- name: Building {{ site.domainname }}
  ansible.builtin.debug:
    var: site

- name: Checking if ssl_cert exists
  ansible.builtin.stat:
    path: "{{ site.ssl_cert | default('/etc/letsencrypt/live/{{ site.domainname }}/fullchain.pem') }}"
  register: stat_cert

- name: Checking if ssl_cert_key exists
  ansible.builtin.stat:
    path: "{{ site.ssl_cert_key | default('/etc/letsencrypt/live/{{ site.domainname }}/privkey.pem') }}"
  register: stat_certkey

- name: Attempting to create site
  when: stat_cert.stat.exists and stat_certkey.stat.exists
  block:
    - name: Set facts for {{ site.domainname }}
      ansible.builtin.set_fact:
        system_pages: true
        webroot: /srv/nginx/{{ team.name }}/{{ site.domainname }}/

    - name: Is Laravel? {{ site.domainname }}
      ansible.builtin.set_fact:
        webroot: /srv/nginx/{{ team.name }}/{{ site.domainname }}/public
        system_pages: false
      when: site.type == "laravel"

    - name: Is Jekyll? {{ site.domainname }}
      ansible.builtin.set_fact:
        webroot: /srv/nginx/{{ team.name }}/{{ site.domainname }}/_site
      when: site.type == "jekyll"

    - name: Create site database for {{ site.domainname }}
      community.mysql.mysql_db:
        name: "{{ team.name }}-{{ site.domainname | replace('.', '_') }}"
        login_host: "{{ site.db_server }}"
        state: present
      when: site.db_server is defined and site.db_server | ipaddr

    - name: Create site virtual directory for {{ site.domainname }}
      ansible.builtin.file:
        path: "{{ nginx_www_dir }}/{{ team.name }}/{{ site.domainname }}"
        state: directory
        owner: "www-{{ team.name }}"
        group: "www-{{ team.name }}"
        mode: "0755"
      when: site.type != "redirect"

    - name: Create available virtual hosts for {{ site.domainname }}
      ansible.builtin.template:
        src: templates/vhost.j2
        dest: "/etc/nginx/sites-available/{{ team.name }}-{{ site.domainname }}"
        owner: root
        group: root
        mode: "0644"
        force: "{{ site.managed | default(True) }}"
      when: site.type != "redirect"

    - name: Create available virtual hosts redirect for {{ site.domainname }}
      ansible.builtin.template:
        src: templates/vhost-redirect.j2
        dest: "/etc/nginx/sites-available/{{ team.name }}-{{ site.domainname }}"
        owner: root
        group: root
        mode: "0644"
        force: "{{ site.managed | default(True) }}"
      when: site.type == "redirect"

    - name: Enable virtual hosts for {{ site.domainname }}
      ansible.builtin.file:
        src: "/etc/nginx/sites-available/{{ team.name }}-{{ site.domainname }}"
        dest: "/etc/nginx/sites-enabled/{{ team.name }}-{{ site.domainname }}"
        owner: root
        group: root
        mode: "0644"
        state: link

    - name: Create Deploy Key Location for {{ team.name }}
      ansible.builtin.file:
        path: "/etc/ssh/deploy_keys/{{ team.name }}"
        state: directory
        mode: "0700"
        owner: root
        group: root

    - name: Check if site deploy keys exist
      ansible.builtin.stat:
        path: "/etc/ssh/deploy_keys/{{ team.name }}/{{ site.domainname }}"
      register: kp

    - name: Generate Site Deploy Keypair if it doesn't exist for {{ site.domainname }}
      when: kp.stat.exists and site.private_repo is defined
      block:
        - name: Generate Keypair
          community.crypto.openssh_keypair:
            path: "/etc/ssh/deploy_keys/{{ team.name }}/{{ site.domainname }}"
            type: rsa
            size: 4096
          register: result
        - name: Resulting Key
          ansible.builtin.debug:
            msg: "{{ result }}"

        - name: Deploy Key
          ansible.builtin.pause:
            prompt: Deploy key \n"{{ result.public_key }}"


    - name: Pull private website repos for {{ site.domainname }}
      ansible.builtin.git:
        repo: "{{ site.repo }}"
        dest: "{{ nginx_www_dir }}/{{ team.name }}/{{ site.domainname }}"
        version: "{{ site.version | default('HEAD') }}"
        key_file: "/etc/ssh/deploy_keys/{{ team.name }}/{{ site.domainname }}"
      when: site.repo is defined and site.private_repo is defined

    - name: Pull website repos for {{ site.domainname }}
      ansible.builtin.git:
        repo: "{{ site.repo }}"
        dest: "{{ nginx_www_dir }}/{{ team.name }}/{{ site.domainname }}"
        version: "{{ site.version | default('HEAD') }}"
      when: site.repo is defined and site.private_repo is not defined

    - name: Update Folder Permissions for {{ site.domainname }}
      ansible.builtin.file:
        path: "{{ nginx_www_dir }}/{{ team.name }}/{{ site.domainname }}"
        owner: "www-{{ team.name }}"
        group: "www-{{ team.name }}"
        mode: u=rwX,g=rwX,o=rX
        recurse: true
      when: site.type != "redirect"

    # - name: Compile the Jekylls
    #   include_tasks: jekyll.yml
    #   args:
    #     apply:
    #       become: yes
    #       become_user: "www-{{ team.name }}"
    #       environment:
    #         PATH: "{{ nginx_www_dir }}/{{ team.name }}/.gem/ruby/2.5.0/bin:/usr/bin:/bin:/sbin"
    #   when: site.type == "jekyll"

- name: Alert! Missing Cert!
  ansible.builtin.pause:
    prompt: Certificate files are not present for "{{ site.domainname }}. Skipping."
  when: not stat_cert.stat.exists and not stat_certkey.stat.exists
